#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#define header_lines 11
#define title 2
#define trailor 5
#define PI 3.1415
#define eps_die 78.54
#define R 8.314
#define kbol 1.38
#define e_charge 1.6
#define eps_zero 8.85
#define T 300.0 
#define surf_z 40.0
#define ion_charge_density -0.01
#define ion_radius 10.0
#define area_per_lipid 65.0
#define time_frame_10 10
#define time_frame_20 20
#define time_frame_30 30
#define time_frame_40 40
#define time_frame_80 80
#define bulk_fraction 0.01000000
//#define bulk_fraction 0.24999975

//#define bulk_density -0.00214286
//#define bulk_density -0.00057143

#define bulk_density -0.00061538
//#define bulk_density -0.00384615

//#define bulk_density -0.00446153

main (int argc, char *argv[])

{
	int i, j, k, grid_points, nx, ny, nz, number_of_steps;
	double *data, origin_x, origin_y, origin_z, counter, hx, hy, hz, potential, *ion_positions_x, *ion_positions_y, *ion_positions_z;
	double debye_inv_sq, bjerrum, vol_integrand, ion_integrand, const_term1, const_term2, pos_exp, neg_exp, count;
	double total_int, local_frac[257][257], coor_x, coor_y;
	double center_x, center_y, center_z, const_surf_term, check_dist, surf_potential, delta_r_sq, time_step_size, diff_const;
	char headers[150];
	FILE *inptr, *paraptr, *outptr, *out1ptr, *diffptr, *ionptr;

	time_step_size = 0.2;
	grid_points = 0;

        if ((inptr = fopen(argv[1], "r")) == NULL)
                printf ("\nERROR - Cannnot open the trajectory file\n");

        if ((paraptr = fopen(argv[2], "r")) == NULL)
                printf ("\nERROR - Cannnot open the trajectory file\n");

	fscanf (paraptr, "%d\n", &nx);  		/*  grid points in x direction */		
	fscanf (paraptr, "%d\n", &ny);			/*  grid points in y direction */
	fscanf (paraptr, "%d\n", &nz);  		/*  grid points in z direction */
	fscanf (paraptr, "%lf\n", &hx); 		/*  mesh size in x direction, in A */		
	fscanf (paraptr, "%lf\n", &hy);			/*  mesh size in y direction, in A */
	fscanf (paraptr, "%lf\n", &hz); 		/*  mesh size in z direction, in A */
	fscanf (paraptr, "%lf\n", &origin_x);  	/*  origin x coordinate */		
	fscanf (paraptr, "%lf\n", &origin_y);		/*  origin y coordinate */
	fscanf (paraptr, "%lf\n", &origin_z);  	/*  origin z coordinate */

	for (i=0; i<header_lines; ++i) {
	        fscanf (inptr, " %[^\n]", headers);
	}
        

	grid_points = nx*ny*nz;
	 
	data = (double *) malloc(grid_points*(sizeof(double)));


	i = 0;
	
	do { 

              if (i==(grid_points-2))
//                   fscanf (inptr, "%lf\n", &data[i]);
                   fscanf (inptr, "%lf %lf\n", &data[i], &data[i+1]);
              else
                        fscanf (inptr, "%lf%lf%lf\n", &data[i], &data[i+1], &data[i+2]);
	

		i = i+3;
	
	} while (i < nx*ny*nz);
	

/************************************** reading ends here *****************************************/	

	total_int = 0.0;	
	
        for (i=0; i<nx; ++i) {
                for (j=0; j<ny; ++j) {
			local_frac[i][j] = 0.0;
                        for (k=0; k<nz; ++k) {
				if (origin_z+hz*k == surf_z) {
//					local_frac[i][j] = (fabs(data[i*ny*nz+j*nz+k]*area_per_lipid) - fabs(bulk_density*area_per_lipid))/area_per_lipid;
					local_frac[i][j] = (fabs(data[i*ny*nz+j*nz+k]*area_per_lipid)/4.0 - fabs(bulk_density*area_per_lipid)/4.0)/area_per_lipid;
//			printf ("%d %d %30.15f\n", i, j, local_frac[i][j]);
				}
                        }
                }
        }


	center_x = 0.0;
	center_y = 0.0;

        for (i=0; i<nx; ++i) {
                for (j=0; j<ny; ++j) {
			coor_x = origin_x + hx*i - center_x;
			coor_y = origin_y + hy*j - center_y;
			if ((coor_x*coor_x + coor_y*coor_y) <= 16.0*16.0) {
				printf ("%lf %lf %30.15f\n", coor_x, coor_y, local_frac[i][j]);
				total_int = total_int + local_frac[i][j];
			}
		}
	}


	printf ("%lf\n", total_int);


	free(data);	
	fclose(inptr);
	fclose(paraptr);

}	


